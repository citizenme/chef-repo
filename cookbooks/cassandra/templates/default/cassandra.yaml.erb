# Cassandra storage config YAML 

# NOTE:
#   See http://wiki.apache.org/cassandra/StorageConfiguration for
#   full explanations of configuration directives
# /NOTE

# The name of the cluster. This is mainly used to prevent machines in
# one logical cluster from joining another.
cluster_name:  '<%= @cassandra[:cluster_name] %>'

# You should always specify InitialToken when setting up a production
# cluster for the first time, and often when adding capacity later.
# The principle is that each node should be given an equal slice of
# the token ring; see http://wiki.apache.org/cassandra/Operations
# for more details.
#
# If blank, Cassandra will request a token bisecting the range of
# the heaviest-loaded existing node.  If there is no load information
# available, such as is the case with a new cluster, it will pick
# a random token, which will lead to hot spots.
initial_token: <%= @cassandra[:initial_token] %> # blank

# Set to true to make new [non-seed] nodes automatically migrate data
# to themselves from the pre-existing nodes in the cluster.  Defaults
# to false because you can only bootstrap N machines at a time from
# an existing cluster of N, so if you are bringing up a cluster of
# 10 machines with 3 seeds you would have to do it in stages.  Leaving
# this off for the initial start simplifies that.
auto_bootstrap: <%= @cassandra[:auto_bootstrap] %> #false

# See http://wiki.apache.org/cassandra/HintedHandoff
hinted_handoff_enabled: <%= @cassandra[:hinted_handoff_enabled] %> #true
# this defines the maximum amount of time a dead host will have hints
# generated.  After it has been dead this long, hints will be dropped.
max_hint_window_in_ms: <%= @cassandra[:max_hint_window_in_ms] %> # one hour
# Sleep this long after delivering each row or row fragment
hinted_handoff_throttle_delay_in_ms: <%= @cassandra[:hinted_handoff_delay_ms] %>

# authentication backend, implementing IAuthenticator; used to identify users
authenticator: <%=@cassandra[:authenticator] %>  #org.apache.cassandra.auth.AllowAllAuthenticator

# authorization backend, implementing IAuthority; used to limit access/provide permissions
authority: <%= @cassandra[:authority] %>  #org.apache.cassandra.auth.AllowAllAuthority

# any IPartitioner may be used, including your own as long as it is on
# the classpath.  Out of the box, Cassandra provides
# org.apache.cassandra.dht.RandomPartitioner
# org.apache.cassandra.dht.ByteOrderedPartitioner,
# org.apache.cassandra.dht.OrderPreservingPartitioner, and
# org.apache.cassandra.dht.CollatingOrderPreservingPartitioner.
# (CollatingOPP colates according to EN,US rules, not naive byte
# ordering.  Use this as an example if you need locale-aware collation.)
partitioner: <%= @cassandra[:partitioner] %> #org.apache.cassandra.dht.RandomPartitioner

# directories where Cassandra should store data on disk.
data_file_directories:
<%- @cassandra[:data_dirs].each do |data_file_dir| -%>
    - <%= data_file_dir %>
<%- end -%>
    #- /var/lib/cassandra/data

# commit log
commitlog_directory: <%= @cassandra[:commitlog_dir] %> #/var/lib/cassandra/commitlog

# saved caches
saved_caches_directory: <%= @cassandra[:saved_caches_dir] %> #/var/lib/cassandra/saved_caches

# Size to allow commitlog to grow to before creating a new segment 
commitlog_rotation_threshold_in_mb: <%= @cassandra[:commitlog_rotation_threshold] %> #128

# commitlog_sync supports the following modes:
# 
# batch:
# In batch mode, Cassandra won't ack writes until the commit log
# has been fsynced to disk.  But fsyncing each write at once is
# performance-prohibitive, so instead Cassandra will wait up to
# commitlog_sync_batch_window_in_ms milliseconds for other writes, before
# syncing that "batch" at once.  This causes a performance penalty
# of about 15% when the commitlog is on a separate device, and much more
# when it shares the same device as the data files.
#
# periodic:
# Writes may be acked immediately (without waiting for the commitlog
# append) and the CommitLog is simply synced every
# commitlog_sync_period_in_ms milliseconds.
#
# periodic_without_flush:
# Like periodic, but the commitlog write buffer is only flushed
# before the sync, so any interruption to the process can be
# expected to lose some writes.  This is the old 0.6 periodic
# behavior and will be removed in future versions if testing
# continues to show no performance benefit over normal periodic.
commitlog_sync: <%= @cassandra[:commitlog_sync] %> #periodic
commitlog_sync_period_in_ms: <%= @cassandra[:commitlog_sync_period] %> #10000
# commitlog_sync: batch
# commitlog_sync_batch_window_in_ms: 10

# emergency pressure valve: each time heap usage after a full (CMS)
# garbage collection is above this fraction of the max, Cassandra will
# flush the largest memtables.  
#
# Set to 1.0 to disable.  Setting this lower than
# CMSInitiatingOccupancyFraction is not likely to be useful.
#
# RELYING ON THIS AS YOUR PRIMARY TUNING MECHANISM WILL WORK POORLY:
# it is most effective under light to moderate load, or read-heavy
# workloads; under truly massive write load, it will often be too
# little, too late.
flush_largest_memtables_at: <%= @cassandra[:flush_largest_memtables_at] %> # 0.75

# emergency pressure valve #2: the first time heap usage after a full
# (CMS) garbage collection is above this fraction of the max,
# Cassandra will reduce cache maximum _capacity_ to the given fraction
# of the current _size_.  Should usually be set substantially above
# flush_largest_memtables_at, since that will have less long-term
# impact on the system.  
# 
# Set to 1.0 to disable.  Setting this lower than
# CMSInitiatingOccupancyFraction is not likely to be useful.
reduce_cache_sizes_at: <%= @cassandra[:reduce_cache_sizes_at] %> # 0.85
reduce_cache_capacity_to: <%= @cassandra[:reduce_cache_capacity_to] %> # 0.6

# Addresses of hosts that are deemed contact points.
# Cassandra nodes use this list of hosts to find each other and learn
# the topology of the ring.  You must change this if you are running
# multiple nodes!
seeds:
<%- @seeds.each do |seed| -%>
    - <%= seed %>
<%- end -%>

# Access mode.  mmapped i/o is substantially faster, but only practical on
# a 64bit machine (which notably does not include EC2 "small" instances)
# or relatively small datasets.  "auto", the safe choice, will enable
# mmapping on a 64bit JVM.  Other values are "mmap", "mmap_index_only"
# (which may allow you to get part of the benefits of mmap on a 32bit
# machine by mmapping only index files) and "standard".
# (The buffer size settings that follow only apply to standard,
# non-mmapped i/o.)
disk_access_mode: <%= @cassandra[:disk_access_mode ] %> #auto

# Unlike most systems, in Cassandra writes are faster than reads, so
# you can afford more of those in parallel.  A good rule of thumb is 2
# concurrent reads per processor core.  Increase ConcurrentWrites to
# the number of clients writing at once if you enable CommitLogSync +
# CommitLogSyncDelay. -->
concurrent_reads: <%= @cassandra[ :concurrent_reads ] %> #8
concurrent_writes: <%= @cassandra[ :concurrent_writes ] %> #32

# This sets the amount of memtable flush writer threads.  These will
# be blocked by disk io, and each one will hold a memtable in memory
# while blocked. If you have a large heap and many data directories,
# you can increase this value for better flush performance.
# By default this will be set to the amount of data directories defined.
memtable_flush_writers: <%= @cassandra[:memtable_flush_writers] %> #1

# Buffer size to use when performing contiguous column slices. 
# Increase this to the size of the column slices you typically perform
sliced_buffer_size_in_kb: <%= @cassandra[:sliced_buffer_size ] %> #64

# TCP port, for commands and data
storage_port: <%= @cassandra[:storage_port] %> #7000

# Address to bind to and tell other Cassandra nodes to connect to. You
# _must_ change this if you want multiple nodes to be able to
# communicate!
# 
# Leaving it blank leaves it up to InetAddress.getLocalHost(). This
# will always do the Right Thing *if* the node is properly configured
# (hostname, name resolution, etc), and the Right Thing is to use the
# address associated with the hostname (it might not be).
#
# Setting this to 0.0.0.0 is always wrong.
listen_address: <%= @cassandra[:listen_addr] %> #localhost

# The address to bind the Thrift RPC service to -- clients connect
# here. Unlike ListenAddress above, you *can* specify 0.0.0.0 here if
# you want Thrift to listen on all interfaces.
# 
# Leaving this blank has the same effect it does for ListenAddress,
# (i.e. it will be based on the configured hostname of the node).
rpc_address: <%= @cassandra[:rpc_addr] %> #localhost
# port for Thrift to listen for clients on
rpc_port: <%= @cassandra[:rpc_port] %> #9160

# enable or disable keepalive on rpc connections
rpc_keepalive: <%= @cassandra[:rpc_keepalive] %> #true

# uncomment to set socket buffer sizes on rpc connections
# rpc_send_buff_size_in_bytes:
# rpc_recv_buff_size_in_bytes:

# Frame size for thrift (maximum field length).
# 0 disables TFramedTransport in favor of TSocket. This option
# is deprecated; we strongly recommend using Framed mode.
thrift_framed_transport_size_in_mb: <%= @cassandra[:thrift_framed_transport] %> #15

# The max length of a thrift message, including all fields and
# internal thrift overhead.
thrift_max_message_length_in_mb: <%= @cassandra[:thrift_max_message_length] %> #16

# Set to true to have Cassandra create a hard link to each sstable
# flushed or streamed locally in a backups/ subdirectory of the
# Keyspace data.  Removing these links is the operator's
# responsibility.
incremental_backups: <%= @cassandra[:incremental_backups] %> # false

# Whether or not to take a snapshot before each compaction.  Be
# careful using this option, since Cassandra won't clean up the
# snapshots for you.  Mostly useful if you're paranoid when there
# is a data format change.
snapshot_before_compaction: <%= @cassandra[:snapshot_before_compaction ] %> #false

# change this to increase the compaction thread's priority.  In java, 1 is the
# lowest priority and that is our default.
# compaction_thread_priority: 1

# Add column indexes to a row after its contents reach this size.
# Increase if your column values are large, or if you have a very large
# number of columns.  The competing causes are, Cassandra has to
# deserialize this much of the row to read a single column, so you want
# it to be small - at least if you do many partial-row reads - but all
# the index data is read for each access, so you don't want to generate
# that wastefully either.
column_index_size_in_kb: <%= @cassandra[:column_index_size] %> #64

# Size limit for rows being compacted in memory.  Larger rows will spill
# over to disk and use a slower two-pass compaction process.  A message
# will be logged specifying the row key.
in_memory_compaction_limit_in_mb: <%= @cassandra[:in_memory_compaction_limit] %> #64

# Track cached row keys during compaction, and re-cache their new
# positions in the compacted sstable.  Disable if you use really large
# key caches.
compaction_preheat_key_cache: <%= @cassandra[:compaction_preheat_key_cache] %> # true

# Time to wait for a reply from other nodes before failing the command 
rpc_timeout_in_ms: <%= @cassandra[:rpc_timeout_in_ms] %> #10000

# phi value that must be reached for a host to be marked down.
# most users should never need to adjust this.
phi_convict_threshold: <%= @cassandra[:phi_convict_threshold] %> #8

# endpoint_snitch -- Set this to a class that implements
# IEndpointSnitch, which will let Cassandra know enough
# about your network topology to route requests efficiently.
# Out of the box, Cassandra provides
#  - org.apache.cassandra.locator.SimpleSnitch:
#    Treats Strategy order as proximity. This improves cache locality
#    when disabling read repair, which can further improve throughput.
#  - org.apache.cassandra.locator.RackInferringSnitch:
#    Proximity is determined by rack and data center, which are
#    assumed to correspond to the 3rd and 2nd octet of each node's
#    IP address, respectively
# org.apache.cassandra.locator.PropertyFileSnitch:
#  - Proximity is determined by rack and data center, which are
#    explicitly configured in cassandra-topology.properties.
endpoint_snitch: <%= @cassandra[:endpoint_snitch] %> #org.apache.cassandra.locator.SimpleSnitch

# dynamic_snitch -- This boolean controls whether the above snitch is
# wrapped with a dynamic snitch, which will monitor read latencies
# and avoid reading from hosts that have slowed (due to compaction,
# for instance)
dynamic_snitch: <%= @cassandra[:dynamic_snitch ] %> #true
# controls how often to perform the more expensive part of host score
# calculation
dynamic_snitch_update_interval_in_ms: 100 
# controls how often to reset all host scores, allowing a bad host to
# possibly recover
dynamic_snitch_reset_interval_in_ms: 600000
# if set greater than zero and read_repair_chance is < 1.0, this will allow
# 'pinning' of replicas to hosts in order to increase cache capacity.
# The badness threshold will control how much worse the pinned host has to be
# before the dynamic snitch will prefer other replicas over it.  This is
# expressed as a double which represents a percentage.  Thus, a value of
# 0.2 means Cassandra would continue to prefer the static snitch values
# until the pinned host was 20% worse than the fastest.
dynamic_snitch_badness_threshold: 0.0

# request_scheduler -- Set this to a class that implements
# RequestScheduler, which will schedule incoming client requests
# according to the specific policy. This is useful for multi-tenancy
# with a single Cassandra cluster.
# NOTE: This is specifically for requests from the client and does
# not affect inter node communication.
# org.apache.cassandra.scheduler.NoScheduler - No scheduling takes place
# org.apache.cassandra.scheduler.RoundRobinScheduler - Round robin of
# client requests to a node with a separate queue for each
# request_scheduler_id. The scheduler is further customized by
# request_scheduler_options as described below.
request_scheduler: <%= @cassandra[:request_scheduler] %> #org.apache.cassandra.scheduler.NoScheduler

# Scheduler Options vary based on the type of scheduler
# NoScheduler - Has no options
# RoundRobin
#  - throttle_limit -- The throttle_limit is the number of in-flight
#                      requests per client.  Requests beyond 
#                      that limit are queued up until
#                      running requests can complete.
#                      The value of 80 here is twice the number of
#                      concurrent_reads + concurrent_writes.
#  - default_weight -- default_weight is optional and allows for
#                      overriding the default which is 1.
#  - weights -- Weights are optional and will default to 1 or the
#               overridden default_weight. The weight translates into how
#               many requests are handled during each turn of the
#               RoundRobin, based on the scheduler id.
#
# request_scheduler_options:
#    throttle_limit: 80
#    default_weight: 5
#    weights:
#      Keyspace1: 1
#      Keyspace2: 5

# request_scheduler_id -- An identifer based on which to perform
# the request scheduling. Currently the only valid option is keyspace.
# request_scheduler_id: keyspace

# The Index Interval determines how large the sampling of row keys
#  is for a given SSTable. The larger the sampling, the more effective
#  the index is at the cost of space.
index_interval: 128
